
9a4bab59d9e1321e20e1d2cc7c3244e4c3b35f21	{"key":"{\"hash\":\"05d6d4c7929ee7cb2b9469633fa064e7\",\"imagemin\":\"7.0.1\",\"imagemin-options\":{\"plugins\":[async input => {\n\tif (!Buffer.isBuffer(input)) {\n\t\tthrow new TypeError(`Expected \\`input\\` to be of type \\`Buffer\\` but received type \\`${typeof input}\\``);\n\t}\n\n\tif (!isGif(input)) {\n\t\treturn input;\n\t}\n\n\tconst args = ['--no-warnings', '--no-app-extensions'];\n\n\tif (options.interlaced) {\n\t\targs.push('--interlace');\n\t}\n\n\tif (options.optimizationLevel) {\n\t\targs.push(`--optimize=${options.optimizationLevel}`);\n\t}\n\n\tif (options.colors) {\n\t\targs.push(`--colors=${options.colors}`);\n\t}\n\n\tconst {stdout} = await execa(gifsicle, args, {\n\t\tencoding: null,\n\t\tinput\n\t});\n\n\treturn stdout;\n},buf => {\n\toptions = {...options};\n\n\tif (!Buffer.isBuffer(buf)) {\n\t\treturn Promise.reject(new TypeError('Expected a buffer'));\n\t}\n\n\tif (!isJpg(buf)) {\n\t\treturn Promise.resolve(buf);\n\t}\n\n\tconst args = ['-copy', 'none'];\n\n\tif (options.progressive) {\n\t\targs.push('-progressive');\n\t}\n\n\tif (options.arithmetic) {\n\t\targs.push('-arithmetic');\n\t} else {\n\t\targs.push('-optimize');\n\t}\n\n\targs.push('-outfile', execBuffer.output, execBuffer.input);\n\n\treturn execBuffer({\n\t\tinput: buf,\n\t\tbin: jpegtran,\n\t\targs\n\t}).catch(error => {\n\t\terror.message = error.stderr || error.message;\n\t\tthrow error;\n\t});\n},async buffer => {\n\toptions = {\n\t\toptimizationLevel: 3,\n\t\tbitDepthReduction: true,\n\t\tcolorTypeReduction: true,\n\t\tpaletteReduction: true,\n\t\tinterlaced: false,\n\t\terrorRecovery: true,\n\t\t...options\n\t};\n\n\tif (!Buffer.isBuffer(buffer)) {\n\t\tthrow new TypeError('Expected a buffer');\n\t}\n\n\tif (!isPng(buffer)) {\n\t\treturn buffer;\n\t}\n\n\tconst arguments_ = [\n\t\t'-strip',\n\t\t'all',\n\t\t'-clobber',\n\t\t'-o',\n\t\toptions.optimizationLevel,\n\t\t'-out',\n\t\texecBuffer.output\n\t];\n\n\tif (options.errorRecovery) {\n\t\targuments_.push('-fix');\n\t}\n\n\tif (!options.bitDepthReduction) {\n\t\targuments_.push('-nb');\n\t}\n\n\tif (typeof options.interlaced === 'boolean') {\n\t\targuments_.push('-i', options.interlaced ? '1' : '0');\n\t}\n\n\tif (!options.colorTypeReduction) {\n\t\targuments_.push('-nc');\n\t}\n\n\tif (!options.paletteReduction) {\n\t\targuments_.push('-np');\n\t}\n\n\targuments_.push(execBuffer.input);\n\n\treturn execBuffer({\n\t\tinput: buffer,\n\t\tbin: optipng,\n\t\targs: arguments_\n\t});\n},async buffer => {\n\toptions = {multipass: true, ...options};\n\n\tif (!isSvg(buffer)) {\n\t\treturn Promise.resolve(buffer);\n\t}\n\n\tif (Buffer.isBuffer(buffer)) {\n\t\tbuffer = buffer.toString();\n\t}\n\n\tconst svgo = new SVGO(options);\n\tconst {data} = await svgo.optimize(buffer);\n\treturn Buffer.from(data);\n}],\"pluginsMeta\":[[{\"name\":\"imagemin-gifsicle\",\"options\":{\"interlaced\":true},\"version\":\"7.0.0\"}],[{\"name\":\"imagemin-jpegtran\",\"options\":{\"progressive\":true},\"version\":\"7.0.0\"}],[{\"name\":\"imagemin-optipng\",\"options\":{\"optimizationLevel\":5},\"version\":\"8.0.0\"}],[{\"name\":\"imagemin-svgo\",\"options\":{\"plugins\":[{\"removeViewBox\":false}]},\"version\":\"8.0.0\"}]]},\"imagemin-webpack\":\"5.1.1\"}","integrity":"sha512-o85PEznGuVElV43rmic1+755lb1fEDEjo/nXEA8e99WyZg1I0ryF2HQGVTg+bIrKavrDWf8MQ+E2W6W0P3UheQ==","time":1670330087907,"size":258337}
6137aaa6648f21de92b624d5fd5d5fa4514627ad	{"key":"{\"hash\":\"05d6d4c7929ee7cb2b9469633fa064e7\",\"imagemin\":\"7.0.1\",\"imagemin-options\":{\"plugins\":[async input => {\n\tif (!Buffer.isBuffer(input)) {\n\t\tthrow new TypeError(`Expected \\`input\\` to be of type \\`Buffer\\` but received type \\`${typeof input}\\``);\n\t}\n\n\tif (!isGif(input)) {\n\t\treturn input;\n\t}\n\n\tconst args = ['--no-warnings', '--no-app-extensions'];\n\n\tif (options.interlaced) {\n\t\targs.push('--interlace');\n\t}\n\n\tif (options.optimizationLevel) {\n\t\targs.push(`--optimize=${options.optimizationLevel}`);\n\t}\n\n\tif (options.colors) {\n\t\targs.push(`--colors=${options.colors}`);\n\t}\n\n\tconst {stdout} = await execa(gifsicle, args, {\n\t\tencoding: null,\n\t\tinput\n\t});\n\n\treturn stdout;\n},buf => {\n\toptions = {...options};\n\n\tif (!Buffer.isBuffer(buf)) {\n\t\treturn Promise.reject(new TypeError('Expected a buffer'));\n\t}\n\n\tif (!isJpg(buf)) {\n\t\treturn Promise.resolve(buf);\n\t}\n\n\tconst args = ['-copy', 'none'];\n\n\tif (options.progressive) {\n\t\targs.push('-progressive');\n\t}\n\n\tif (options.arithmetic) {\n\t\targs.push('-arithmetic');\n\t} else {\n\t\targs.push('-optimize');\n\t}\n\n\targs.push('-outfile', execBuffer.output, execBuffer.input);\n\n\treturn execBuffer({\n\t\tinput: buf,\n\t\tbin: jpegtran,\n\t\targs\n\t}).catch(error => {\n\t\terror.message = error.stderr || error.message;\n\t\tthrow error;\n\t});\n},async buffer => {\n\toptions = {\n\t\toptimizationLevel: 3,\n\t\tbitDepthReduction: true,\n\t\tcolorTypeReduction: true,\n\t\tpaletteReduction: true,\n\t\tinterlaced: false,\n\t\terrorRecovery: true,\n\t\t...options\n\t};\n\n\tif (!Buffer.isBuffer(buffer)) {\n\t\tthrow new TypeError('Expected a buffer');\n\t}\n\n\tif (!isPng(buffer)) {\n\t\treturn buffer;\n\t}\n\n\tconst arguments_ = [\n\t\t'-strip',\n\t\t'all',\n\t\t'-clobber',\n\t\t'-o',\n\t\toptions.optimizationLevel,\n\t\t'-out',\n\t\texecBuffer.output\n\t];\n\n\tif (options.errorRecovery) {\n\t\targuments_.push('-fix');\n\t}\n\n\tif (!options.bitDepthReduction) {\n\t\targuments_.push('-nb');\n\t}\n\n\tif (typeof options.interlaced === 'boolean') {\n\t\targuments_.push('-i', options.interlaced ? '1' : '0');\n\t}\n\n\tif (!options.colorTypeReduction) {\n\t\targuments_.push('-nc');\n\t}\n\n\tif (!options.paletteReduction) {\n\t\targuments_.push('-np');\n\t}\n\n\targuments_.push(execBuffer.input);\n\n\treturn execBuffer({\n\t\tinput: buffer,\n\t\tbin: optipng,\n\t\targs: arguments_\n\t});\n},async buffer => {\n\toptions = {multipass: true, ...options};\n\n\tif (!isSvg(buffer)) {\n\t\treturn Promise.resolve(buffer);\n\t}\n\n\tif (Buffer.isBuffer(buffer)) {\n\t\tbuffer = buffer.toString();\n\t}\n\n\tconst svgo = new SVGO(options);\n\tconst {data} = await svgo.optimize(buffer);\n\treturn Buffer.from(data);\n}],\"pluginsMeta\":[[{\"name\":\"imagemin-gifsicle\",\"options\":{\"interlaced\":true},\"version\":\"7.0.0\"}],[{\"name\":\"imagemin-jpegtran\",\"options\":{\"progressive\":true},\"version\":\"7.0.0\"}],[{\"name\":\"imagemin-optipng\",\"options\":{\"optimizationLevel\":5},\"version\":\"8.0.0\"}],[{\"name\":\"imagemin-svgo\",\"options\":{\"plugins\":[{\"removeViewBox\":false}]},\"version\":\"8.0.0\"}]]},\"imagemin-webpack\":\"5.1.1\"}","integrity":"sha512-o85PEznGuVElV43rmic1+755lb1fEDEjo/nXEA8e99WyZg1I0ryF2HQGVTg+bIrKavrDWf8MQ+E2W6W0P3UheQ==","time":1670330087901,"size":258337}